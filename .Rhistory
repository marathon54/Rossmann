set.seed(10)
y<-c(1:1000)
x1<-c(1:1000)*runif(1000,min=0,max=2)
x2<-(c(1:1000)*runif(1000,min=0,max=2))^2
x3<-log(c(1:1000)*runif(1000,min=0,max=2))
set.seed(10)
y<-c(1:1000)
x1<-c(1:1000)*runif(1000,min=0,max=2)
x2<-(c(1:1000)*runif(1000,min=0,max=2))^2
x3<-log(c(1:1000)*runif(1000,min=0,max=2))
lm_fit<-lm(y~x1+x2+x3)
summary(lm_fit)
set.seed(10)
all_data<-data.frame(y,x1,x2,x3)
positions <- sample(nrow(all_data),size=floor((nrow(all_data)/4)*3))
training<- all_data[positions,]
testing<- all_data[-positions,]
lm_fit<-lm(y~x1+x2+x3,data=training)
predictions<-predict(lm_fit,newdata=testing)
error<-sqrt((sum((testing$y-predictions)^2))/nrow(testing))
error
set.seed(10)
y<-c(1:1000)
x1<-c(1:1000)*runif(1000,min=0,max=2)
x2<-(c(1:1000)*runif(1000,min=0,max=2))^2
x3<-log(c(1:1000)*runif(1000,min=0,max=2))
lm_fit<-lm(y~x1+x2+x3)
summary(lm_fit)
predictions<-predict(lm_fit,newdata=testing)
predictions
error<-sqrt((sum((testing$y-predictions)^2))/nrow(testing))
summary(predictions)
summary(lm_fit)
set.seed(10)
all_data<-data.frame(y,x1,x2,x3)
positions <- sample(nrow(all_data),size=floor((nrow(all_data)/4)*3))
training<- all_data[positions,]
testing<- all_data[-positions,]
lm_fit<-lm(y~x1+x2+x3,data=training)
predictions<-predict(lm_fit,newdata=testing)
error<-sqrt((sum((testing$y-predictions)^2))/nrow(testing))
error
library(foreach)
length_divisor<-6
iterations<-5000
predictions<-foreach(m=1:iterations,.combine=cbind) %do% {
training_positions <- sample(nrow(training), size=floor((nrow(training)/length_divisor)))
train_pos<-1:nrow(training) %in% training_positions
lm_fit<-lm(y~x1+x2+x3,data=training[train_pos,])
predict(lm_fit,newdata=testing)
}
predictions<-rowMeans(predictions)
error<-sqrt((sum((testing$y-predictions)^2))/nrow(testing))
error
summary(lm_fit)
library(randomForest)
rf_fit<-randomForest(y~x1+x2+x3,data=training,ntree=500)
predictions<-predict(rf_fit,newdata=testing)
error<-sqrt((sum((testing$y-predictions)^2))/nrow(testing))
error
summary(rf_fit)
summary(training)
summary(rf_fit)
install.packages("data.table")
train <- read.csv(read.csv("~/_data/Rossmann/train.csv")
error2<-sqrt(
(sum(
(
(testing$y-predictions)/testing$y)^2))/nrow(testing))
error2
library(foreach)
length_divisor<-6
iterations<-5000
predictions<-foreach(m=1:iterations,.combine=cbind) %do% {
training_positions <- sample(nrow(training), size=floor((nrow(training)/length_divisor)))
train_pos<-1:nrow(training) %in% training_positions
lm_fit<-lm(y~x1+x2+x3,data=training[train_pos,])
predict(lm_fit,newdata=testing)
}
predictions<-rowMeans(predictions)
error<-sqrt((sum((testing$y-predictions)^2))/nrow(testing))
error2<-sqrt((sum(((testing$y-predictions)/testing$y)^2))/nrow(testing))
error
error2
#first ensemble...
library(randomForest)
rf_fit<-randomForest(y~x1+x2+x3,data=training,ntree=500)
predictions<-predict(rf_fit,newdata=testing)
error<-sqrt((sum((testing$y-predictions)^2))/nrow(testing))
error2<-sqrt((sum(((testing$y-predictions)/testing$y)^2))/nrow(testing))
error
error2
library(data.table)
library(forecast)
library(plyr)
train <- fread("~/_data/Rossmann/train.csv",stringsAsFactors = T)
test  <- fread("~/_data/Rossmann/test.csv",stringsAsFactors = T)
store <- fread("~/_data/Rossmann/store.csv",stringsAsFactors = T)
train <- fread("~/_data/Rossmann/train.csv",stringsAsFactors = T)
train <- read.csv("~/_data/Rossmann/train.csv", stringsAsFactors = T)
test  <- read.csv("~/_data/Rossmann/test.csv", stringsAsFactors = T)
store <- read.csv("~/_data/Rossmann/store.csv", stringsAsFactors = T)
train <- merge(train,store,by="Store")
test <- merge(test,store,by="Store")
train[,Date:=as.Date(Date)]
test[,Date:=as.Date(Date)]
library(data.table)
library(forecast)
library(plyr)
train <- read.csv("~/_data/Rossmann/train.csv", stringsAsFactors = T)
test  <- read.csv("~/_data/Rossmann/test.csv", stringsAsFactors = T)
store <- read.csv("~/_data/Rossmann/store.csv", stringsAsFactors = T)
train <- merge(train,store,by="Store")
test <- merge(test,store,by="Store")
train[,Date:=as.Date(Date)]
test[,Date:=as.Date(Date)]
train <- train[order(Store,Date)]
test <- test[order(Store,Date)]
library(data.table)
library(forecast)
library(plyr)
train <- read.csv("~/_data/Rossmann/train.csv", stringsAsFactors = T)
test  <- read.csv("~/_data/Rossmann/test.csv", stringsAsFactors = T)
store <- read.csv("~/_data/Rossmann/store.csv", stringsAsFactors = T)
train <- merge(train,store,by="Store")
test <- merge(test,store,by="Store")
train[,Date:=as.Date(Date)]
test[,Date:=as.Date(Date)]
train <- train[order(Store,Date)]
test <- test[order(Store,Date)]
train <- merge(train,store,by="Store")
test <- merge(test,store,by="Store")
train[,Date:=as.Date(Date)]
train <- train[order(Store,Date)]
test <- test[order(Store,Date)]
View(train)
train <- read.csv("~/_data/Rossmann/train.csv", stringsAsFactors = T)
test  <- read.csv("~/_data/Rossmann/test.csv", stringsAsFactors = T)
store <- read.csv("~/_data/Rossmann/store.csv", stringsAsFactors = T)
ts_fit = function(x) {
Sales <- ts(x$Sales, frequency = 365)
DayOfWeek <- x$DayOfWeek
Open <- x$Open
Promo <- x$Promo
StateHoliday <- x$StateHoliday
SchoolHoliday <- x$SchoolHoliday
fit <- tslm(Sales ~ trend + season + DayOfWeek + Open + Promo + StateHoliday + SchoolHoliday)
return(fit)
}
out <- dlply(train, .(Store), ts_fit)
library(forecast)
install.packages("forecast")
library(data.table)
library(forecast)
library(plyr)
train <- read.csv("~/_data/Rossmann/train.csv", stringsAsFactors = T)
test  <- read.csv("~/_data/Rossmann/test.csv", stringsAsFactors = T)
store <- read.csv("~/_data/Rossmann/store.csv", stringsAsFactors = T)
train <- merge(train,store,by="Store")
test <- merge(test,store,by="Store")
train[,Date:=as.Date(Date)]
test[,Date:=as.Date(Date)]
train <- train[order(Store,Date)]
test <- test[order(Store,Date)]
ts_fit = function(x) {
Sales <- ts(x$Sales, frequency = 365)
DayOfWeek <- x$DayOfWeek
Open <- x$Open
Promo <- x$Promo
StateHoliday <- x$StateHoliday
SchoolHoliday <- x$SchoolHoliday
fit <- tslm(Sales ~ trend + season + DayOfWeek + Open + Promo + StateHoliday + SchoolHoliday)
return(fit)
}
out <- dlply(train, .(Store), ts_fit)
out
str(out)
dim(out)
head(out)
s_forecast = function(x,y){
index <- x$Store[1]
fitt <- y[[index]]
return(data.frame(forecast(fitt, newdata = data.frame(DayOfWeek = x$DayOfWeek,
Open = x$Open, Promo = x$Promo,
StateHoliday = x$StateHoliday,
SchoolHoliday = x$SchoolHoliday))))
}
ts_forecast = function(x,y){
index <- x$Store[1]
fitt <- y[[index]]
return(data.frame(forecast(fitt, newdata = data.frame(DayOfWeek = x$DayOfWeek,
Open = x$Open, Promo = x$Promo,
StateHoliday = x$StateHoliday,
SchoolHoliday = x$SchoolHoliday))))
}
predictions <- ddply(test, .(Store), ts_forecast, out)
predictions$Point.Forecast <- ifelse(predictions$Point.Forecast < 0, 0, predictions$Point.Forecast)
Avg_Sales <- train[,.(AS = mean(Sales,na.rm=T)),.(Store,DayOfWeek)]
test <- merge(test,Avg_Sales,by=c("Store","DayOfWeek"))
test <- test[order(Store,Date)]
test[,FPPredictions:=Open * predictions$Point.Forecast]
test[,FPredictions:=ifelse(is.na(predictions$Point.Forecast),AS,predictions$Point.Forecast)]
results <- data.frame(Id=test$Id, Sales=test$FPredictions)
results <- results[order(results$Id),]
Avg_Sales <- train[,.(AS = mean(Sales,na.rm=T)),.(Store,DayOfWeek)]
Avg_Sales <- train[,.(AS = mean(Sales,na.rm=T)),.(Store,DayOfWeek)]
test <- merge(test,Avg_Sales,by=c("Store","DayOfWeek"))
test <- test[order(Store,Date)]
test[,FPPredictions:=Open * predictions$Point.Forecast]
test[,FPredictions:=ifelse(is.na(predictions$Point.Forecast),AS,predictions$Point.Forecast)]
results <- data.frame(Id=test$Id, Sales=test$FPredictions)
results <- results[order(results$Id),]
dim(y)
library(dplyr)
train <- read.csv("~/_data/Rossmann/train.csv", header = T)
test <- read.csv("~/_data/Rossmann/test.csv", header = T)
store <- read.csv("~/_data/Rossmann/store.csv")
train <- merge(train,store)
test <- merge(test,store)
ajeita_pa_mim <- function(dt){
# replacing NA's by the mean value
dt$CompetitionDistance[is.na(dt$CompetitionDistance)] = round(mean(dt$CompetitionDistance, na.rm = T))
dt$CompetitionOpenSinceMonth[is.na(dt$CompetitionOpenSinceMonth)] = round(mean(dt$CompetitionOpenSinceMonth, na.rm = T))
dt$CompetitionOpenSinceYear[is.na(dt$CompetitionOpenSinceYear)] = round(mean(dt$CompetitionOpenSinceYear, na.rm = T))
dt$Promo2SinceWeek[is.na(dt$Promo2SinceWeek)] = round(mean(dt$Promo2SinceWeek, na.rm = T))
dt$Promo2SinceYear[is.na(dt$Promo2SinceYear)] = round(mean(dt$Promo2SinceYear, na.rm = T))
dt$Open[is.na(dt$Open)] = round(mean(dt$Open, na.rm = T))
# converting to numeric
dt$StateHoliday = as.numeric(dt$StateHoliday)
dt$StoreType = as.numeric(dt$StoreType)
dt$Assortment = as.numeric(dt$Assortment)
dt$PromoInterval = as.numeric(dt$PromoInterval)
# seperating out the elements of the date column for the dt set
dt$Date = as.Date(dt$Date, format = "%Y-%m-%d")
dt$month <- as.integer(format(dt$Date, "%m"))
dt$year <- as.integer(format(dt$Date, "%y"))
dt$day <- as.integer(format(dt$Date, "%d"))
# removing the date columns (Date not used) (Customers affect simetry) (CompetitionOpenSinceYear not relevant/correlated)
#dt$Date = NULL
dt$Customers = NULL
dt$CompetitionOpenSinceYear = NULL
return(dt)
}
train1 = ajeita_pa_mim(train)
test1 = ajeita_pa_mim(test)
test<-filter(train1, Date>='2015-6-15')
train<-filter(train1, Date<'2015-6-15')
cor(train)
mod <- lm(Sales ~ DayOfWeek+Open+Promo+StoreType+Assortment+CompetitionDistance+Promo2+PromoInterval, data = train)
summary(mod)
dim(train)
plot(x=train$Customers, y=train$Sales)
nrow(train)
nrow(train)+nrow(test)
